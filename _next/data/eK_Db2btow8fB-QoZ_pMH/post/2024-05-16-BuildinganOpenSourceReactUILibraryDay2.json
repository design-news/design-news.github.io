{"pageProps":{"post":{"title":"오픈 소스 리액트 UI 라이브러리 구축하기 - 2일째","description":"","date":"2024-05-16 19:18","slug":"2024-05-16-BuildinganOpenSourceReactUILibraryDay2","content":"\n<img src=\"/assets/img/2024-05-16-BuildinganOpenSourceReactUILibraryDay2_0.png\" />\n\n두 번째 날 다시 방문해 주셔서 환영합니다. 오픈 소스 React UI 라이브러리를 만드는 시리즈의 두 번째 날입니다!\n\n오늘은 모든 것을 준비하는 과정이었습니다. 우리가 지금까지 얼마나 진전했는지 살펴봅시다.\n\n# 프로젝트 설정하기\n\n<div class=\"content-ad\"></div>\n\n## 1. Git 저장소 구성하기\n\n우선, GitHub의 EtnaUI라는 조직 아래 etna-ui라는 새로운 Git 저장소를 설정했습니다. 여기서 저장소를 확인할 수 있어요. 이 저장소는 앞으로 코드와 협업을 위한 중앙 허브 역할을 할 거에요.\n\n![GitHub 저장소](/assets/img/2024-05-16-BuildinganOpenSourceReactUILibraryDay2_1.png)\n\n## 2. React 프로젝트 부트스트래핑하기\n\n<div class=\"content-ad\"></div>\n\n다음은 React 프로젝트를 처음부터 시작하는 방법을 설명하겠습니다. Create React App을 사용하는 대신에 번들러로 Vite를 선택했습니다. Vite는 빠르고 간단하다는 것으로 알려져 있어서 개발 프로세스를 효과적으로 해결하는 데 도움이 될 것입니다. 아래는 설정하는 방법입니다:\n\n```js\npnpm add react react-dom\npnpm add -D vite @vitejs/plugin-react\n```\n\n또한, vite.config.ts 파일을 구성하여 React 플러그인을 포함하도록 설정했습니다:\n\n```js\n// vite.config.ts\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nexport default defineConfig({\n  plugins: [react()],\n});\n```\n\n<div class=\"content-ad\"></div>\n\n## 3. 패키지 매니저 선택\n\n페키지 관리를 위해 pnpm@9를 사용하기로 결정했어요. PNPM은 다른 패키지 매니저에 비해 디스크 공간을 더 효율적으로 사용하며 빠릅니다. 게다가, 서로 다른 개발 환경에서도 일관성을 유지하기 위해 Node.js 버전을 관리하기 위해 Volta를 사용하고 있어요.\n\n## 4. 첫 번째 컴포넌트 생성\n\n기본 설정이 완료되었으니, 첫 번째 컴포넌트를 만들었어요: 간단한 `Button` 컴포넌트입니다. 이 초기 컴포넌트를 사용하여 모든 것이 정상적으로 작동하는지 테스트할 예정이에요.\n\n<div class=\"content-ad\"></div>\n\n아래는 Button 컴포넌트를 간단히 살펴볼 수 있어요:\n\n```js\nimport { ButtonHTMLAttributes } from \"react\";\n\nimport \"./Button.scss\";\n\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: \"primary\" | \"secondary\";\n  size?: \"small\" | \"medium\" | \"large\";\n}\n\nexport const Button = ({ className, size = \"medium\", variant = \"primary\", ...props }: ButtonProps) => (\n  <button className={`button button--${variant} button--${size}`} {...props} />\n);\n```\n\n그리고 함께 사용되는 SCSS 파일은 아래와 같아요:\n\n```js\n.button {\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  cursor: pointer;\n  display: inline-block;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 1.5;\n  padding: 8px 16px;\n  text-align: center;\n  text-decoration: none;\n  transition:\n    background-color 0.3s,\n    border-color 0.3s,\n    color 0.3s;\n\n  &--primary {\n    background-color: #8a4dff;\n    color: #ffffff;\n\n    &:hover {\n      background-color: #6f3aff;\n    }\n\n    &:active {\n      background-color: #4d1aff;\n    }\n  }\n\n  &--secondary {\n    background-color: #d6baff;\n    color: #000000;\n\n    &:hover {\n      background-color: #b38cff;\n    }\n\n    &:active {\n      background-color: #8a4dff;\n    }\n  }\n\n  &--small {\n    font-size: 12px;\n    padding: 6px 12px;\n  }\n\n  &--medium {\n    font-size: 16px;\n    padding: 10px 20px;\n  }\n\n  &--large {\n    font-size: 18px;\n    padding: 12px 24px;\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 5. Sass 지원 추가하기\n\n우리의 컴포넌트를 스타일링하기 위해, 종속성으로 Sass 지원을 추가했어요:\n\n```js\npnpm add sass\n```\n\n## 6. TypeScript 구성하기\n\n<div class=\"content-ad\"></div>\n\nTypeScript은 우리의 설정에서 중요한 부분으로, 타입 안전성과 개발자 경험을 향상시켜줍니다. tsconfig.json을 설정하는 데 시간을 소비해서, 프로젝트의 요구에 맞게 맞추었어요. TypeScript 구성에 대해 더 깊이 파고들고 싶다면, 이 가이드가 매우 유용했어요.\n\n```js\n{\n  \"compilerOptions\": {\n    /* 언어 및 환경 */\n    \"target\": \"ESNext\",                                  /* 생성된 JavaScript에 대한 JavaScript 언어 버전 및 호환 라이브러리 선언을 포함하도록 설정. */\n    \"jsx\": \"react-jsx\",                                /* 생성된 JSX 코드를 지정합니다. */\n\n    /* 모듈 */\n    \"module\": \"ESNext\",                                /* 생성된 모듈 코드를 지정합니다. */\n    \"moduleResolution\": \"Bundler\",                     /* TypeScript가 지정된 모듈 지정자에서 파일을 어떻게 찾는지를 지정합니다. */\n    \"noEmit\": true,                                   /* 컴파일 중에 파일을 생성하지 않도록 설정합니다. */\n\n    /* 타입 확인 */\n    \"strict\": true,                                      /* 모든 엄격한 타입 확인 옵션을 활성화합니다. */\n  },\n  \"include\": [\"src\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}\n```\n\n## 7. Prettier 설정하기\n\n코드를 깔끔하고 일관되게 유지하기 위해 Prettier를 설치하고 구성했어요. 지금은 우리의 요구에 충분한 기본 구성을 사용하고 있어요.\n\n<div class=\"content-ad\"></div>\n\n```js\npnpm add -D prettier\n```\n\n## 프로젝트 실행하기\n\n모든 것이 올바르게 설정되었는지 확인하기 위해 dev 스크립트를 사용하여 프로젝트를 실행했습니다. 이 스크립트는 웹 서버를 시작하고 데모 페이지를 로드하여 Button 구성 요소를 테스트했습니다.\n\n```js\npnpm dev\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-16-BuildinganOpenSourceReactUILibraryDay2_2.png\" />\n\n앞으로는 더 포괄적인 컴포넌트 설명과 테스트를 위해 Storybook을 사용할 계획입니다.\n\n# Package Configuration\n\n여기에 필요한 모든 종속성과 스크립트가 포함된 package.json 파일을 살펴보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n```json\n{\n  \"name\": \"etna-ui\",\n  \"author\": \"Matteo Cavallo\",\n  \"description\": \"EtnaUI는 이탈리아에서 사랑을 담아 만들어진 종합적인 디자인 시스템입니다.\",\n  \"type\": \"module\",\n  \"files\": [\"dist\"],\n  \"scripts\": {\n    \"dev\": \"vite\"\n  },\n  \"peerDependencies\": {\n    \"react\": \"^18.3.0\",\n    \"react-dom\": \"^18.3.0\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.3.2\",\n    \"@types/react-dom\": \"^18.3.0\",\n    \"@vitejs/plugin-react\": \"^4.2.1\",\n    \"prettier\": \"^3.2.5\",\n    \"sass\": \"^1.77.1\",\n    \"typescript\": \"^5.4.5\",\n    \"vite\": \"^5.2.11\"\n  }\n}\n```\n\n# 다음 단계\n\n기초 세팅이 완료되었으므로 나머지 컴포넌트를 구축할 준비가 되었습니다. 아직 해야 할 몇 가지 항목들이 있습니다:\n\n- 적절한 폴더 구조 설정\n- 컴포넌트 문서화 및 테스트를 위해 Storybook 구현\n- Jest를 이용한 단위 테스트 구성\n- CI/CD 파이프라인 설정\n- 변형에 대해 CVA 사용 여부 고려\n- 스타일링을 위해 BEM 사용 여부 고려\n- 코드 품질을 위한 ESLint 추가\n\n<div class=\"content-ad\"></div>\n\n일상적인 진행 상황 업데이트를 계속해서 공유할 테니 기다려주세요. 지금 당장은 GitHub에서 프로젝트의 현재 상태를 확인할 수 있어요.\n\n이 여정을 따라와 주셔서 감사합니다. 아래 댓글에 궁금한 점이나 제안 사항을 자유롭게 남겨주세요. 함께 멋진 것을 만들어봐요!\n\n즐거운 코딩 되세요!\n","ogImage":{"url":"/assets/img/2024-05-16-BuildinganOpenSourceReactUILibraryDay2_0.png"},"coverImage":"/assets/img/2024-05-16-BuildinganOpenSourceReactUILibraryDay2_0.png","tag":["Tech"],"readingTime":6},"content":"<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n</head>\n<body>\n<img src=\"/assets/img/2024-05-16-BuildinganOpenSourceReactUILibraryDay2_0.png\">\n<p>두 번째 날 다시 방문해 주셔서 환영합니다. 오픈 소스 React UI 라이브러리를 만드는 시리즈의 두 번째 날입니다!</p>\n<p>오늘은 모든 것을 준비하는 과정이었습니다. 우리가 지금까지 얼마나 진전했는지 살펴봅시다.</p>\n<h1>프로젝트 설정하기</h1>\n<div class=\"content-ad\"></div>\n<h2>1. Git 저장소 구성하기</h2>\n<p>우선, GitHub의 EtnaUI라는 조직 아래 etna-ui라는 새로운 Git 저장소를 설정했습니다. 여기서 저장소를 확인할 수 있어요. 이 저장소는 앞으로 코드와 협업을 위한 중앙 허브 역할을 할 거에요.</p>\n<p><img src=\"/assets/img/2024-05-16-BuildinganOpenSourceReactUILibraryDay2_1.png\" alt=\"GitHub 저장소\"></p>\n<h2>2. React 프로젝트 부트스트래핑하기</h2>\n<div class=\"content-ad\"></div>\n<p>다음은 React 프로젝트를 처음부터 시작하는 방법을 설명하겠습니다. Create React App을 사용하는 대신에 번들러로 Vite를 선택했습니다. Vite는 빠르고 간단하다는 것으로 알려져 있어서 개발 프로세스를 효과적으로 해결하는 데 도움이 될 것입니다. 아래는 설정하는 방법입니다:</p>\n<pre><code class=\"hljs language-js\">pnpm add react react-dom\npnpm add -D vite @vitejs/plugin-react\n</code></pre>\n<p>또한, vite.config.ts 파일을 구성하여 React 플러그인을 포함하도록 설정했습니다:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// vite.config.ts</span>\n<span class=\"hljs-keyword\">import</span> { defineConfig } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vite\"</span>;\n<span class=\"hljs-keyword\">import</span> react <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@vitejs/plugin-react\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title function_\">defineConfig</span>({\n  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-title function_\">react</span>()],\n});\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>3. 패키지 매니저 선택</h2>\n<p>페키지 관리를 위해 pnpm@9를 사용하기로 결정했어요. PNPM은 다른 패키지 매니저에 비해 디스크 공간을 더 효율적으로 사용하며 빠릅니다. 게다가, 서로 다른 개발 환경에서도 일관성을 유지하기 위해 Node.js 버전을 관리하기 위해 Volta를 사용하고 있어요.</p>\n<h2>4. 첫 번째 컴포넌트 생성</h2>\n<p>기본 설정이 완료되었으니, 첫 번째 컴포넌트를 만들었어요: 간단한 <code>Button</code> 컴포넌트입니다. 이 초기 컴포넌트를 사용하여 모든 것이 정상적으로 작동하는지 테스트할 예정이에요.</p>\n<div class=\"content-ad\"></div>\n<p>아래는 Button 컴포넌트를 간단히 살펴볼 수 있어요:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ButtonHTMLAttributes</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"./Button.scss\"</span>;\n\n<span class=\"hljs-keyword\">export</span> interface <span class=\"hljs-title class_\">ButtonProps</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">ButtonHTMLAttributes</span>&#x3C;<span class=\"hljs-title class_\">HTMLButtonElement</span>> {\n  variant?: <span class=\"hljs-string\">\"primary\"</span> | <span class=\"hljs-string\">\"secondary\"</span>;\n  size?: <span class=\"hljs-string\">\"small\"</span> | <span class=\"hljs-string\">\"medium\"</span> | <span class=\"hljs-string\">\"large\"</span>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Button</span> = (<span class=\"hljs-params\">{ className, size = <span class=\"hljs-string\">\"medium\"</span>, variant = <span class=\"hljs-string\">\"primary\"</span>, ...props }: ButtonProps</span>) => (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">button</span> <span class=\"hljs-attr\">button--</span>${<span class=\"hljs-attr\">variant</span>} <span class=\"hljs-attr\">button--</span>${<span class=\"hljs-attr\">size</span>}`} {<span class=\"hljs-attr\">...props</span>} /></span></span>\n);\n</code></pre>\n<p>그리고 함께 사용되는 SCSS 파일은 아래와 같아요:</p>\n<pre><code class=\"hljs language-js\">.<span class=\"hljs-property\">button</span> {\n  <span class=\"hljs-attr\">border</span>: 1px solid #ccc;\n  border-<span class=\"hljs-attr\">radius</span>: 4px;\n  <span class=\"hljs-attr\">cursor</span>: pointer;\n  <span class=\"hljs-attr\">display</span>: inline-block;\n  font-<span class=\"hljs-attr\">size</span>: 14px;\n  font-<span class=\"hljs-attr\">weight</span>: <span class=\"hljs-number\">500</span>;\n  line-<span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">1.5</span>;\n  <span class=\"hljs-attr\">padding</span>: 8px 16px;\n  text-<span class=\"hljs-attr\">align</span>: center;\n  text-<span class=\"hljs-attr\">decoration</span>: none;\n  <span class=\"hljs-attr\">transition</span>:\n    background-color <span class=\"hljs-number\">0.</span>3s,\n    border-color <span class=\"hljs-number\">0.</span>3s,\n    color <span class=\"hljs-number\">0.</span>3s;\n\n  &#x26;--primary {\n    background-<span class=\"hljs-attr\">color</span>: #8a4dff;\n    <span class=\"hljs-attr\">color</span>: #ffffff;\n\n    &#x26;:hover {\n      background-<span class=\"hljs-attr\">color</span>: #6f3aff;\n    }\n\n    &#x26;:active {\n      background-<span class=\"hljs-attr\">color</span>: #4d1aff;\n    }\n  }\n\n  &#x26;--secondary {\n    background-<span class=\"hljs-attr\">color</span>: #d6baff;\n    <span class=\"hljs-attr\">color</span>: #<span class=\"hljs-number\">000000</span>;\n\n    &#x26;:hover {\n      background-<span class=\"hljs-attr\">color</span>: #b38cff;\n    }\n\n    &#x26;:active {\n      background-<span class=\"hljs-attr\">color</span>: #8a4dff;\n    }\n  }\n\n  &#x26;--small {\n    font-<span class=\"hljs-attr\">size</span>: 12px;\n    <span class=\"hljs-attr\">padding</span>: 6px 12px;\n  }\n\n  &#x26;--medium {\n    font-<span class=\"hljs-attr\">size</span>: 16px;\n    <span class=\"hljs-attr\">padding</span>: 10px 20px;\n  }\n\n  &#x26;--large {\n    font-<span class=\"hljs-attr\">size</span>: 18px;\n    <span class=\"hljs-attr\">padding</span>: 12px 24px;\n  }\n}\n</code></pre>\n<div class=\"content-ad\"></div>\n<h2>5. Sass 지원 추가하기</h2>\n<p>우리의 컴포넌트를 스타일링하기 위해, 종속성으로 Sass 지원을 추가했어요:</p>\n<pre><code class=\"hljs language-js\">pnpm add sass\n</code></pre>\n<h2>6. TypeScript 구성하기</h2>\n<div class=\"content-ad\"></div>\n<p>TypeScript은 우리의 설정에서 중요한 부분으로, 타입 안전성과 개발자 경험을 향상시켜줍니다. tsconfig.json을 설정하는 데 시간을 소비해서, 프로젝트의 요구에 맞게 맞추었어요. TypeScript 구성에 대해 더 깊이 파고들고 싶다면, 이 가이드가 매우 유용했어요.</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-string\">\"compilerOptions\"</span>: {\n    <span class=\"hljs-comment\">/* 언어 및 환경 */</span>\n    <span class=\"hljs-string\">\"target\"</span>: <span class=\"hljs-string\">\"ESNext\"</span>,                                  <span class=\"hljs-comment\">/* 생성된 JavaScript에 대한 JavaScript 언어 버전 및 호환 라이브러리 선언을 포함하도록 설정. */</span>\n    <span class=\"hljs-string\">\"jsx\"</span>: <span class=\"hljs-string\">\"react-jsx\"</span>,                                <span class=\"hljs-comment\">/* 생성된 JSX 코드를 지정합니다. */</span>\n\n    <span class=\"hljs-comment\">/* 모듈 */</span>\n    <span class=\"hljs-string\">\"module\"</span>: <span class=\"hljs-string\">\"ESNext\"</span>,                                <span class=\"hljs-comment\">/* 생성된 모듈 코드를 지정합니다. */</span>\n    <span class=\"hljs-string\">\"moduleResolution\"</span>: <span class=\"hljs-string\">\"Bundler\"</span>,                     <span class=\"hljs-comment\">/* TypeScript가 지정된 모듈 지정자에서 파일을 어떻게 찾는지를 지정합니다. */</span>\n    <span class=\"hljs-string\">\"noEmit\"</span>: <span class=\"hljs-literal\">true</span>,                                   <span class=\"hljs-comment\">/* 컴파일 중에 파일을 생성하지 않도록 설정합니다. */</span>\n\n    <span class=\"hljs-comment\">/* 타입 확인 */</span>\n    <span class=\"hljs-string\">\"strict\"</span>: <span class=\"hljs-literal\">true</span>,                                      <span class=\"hljs-comment\">/* 모든 엄격한 타입 확인 옵션을 활성화합니다. */</span>\n  },\n  <span class=\"hljs-string\">\"include\"</span>: [<span class=\"hljs-string\">\"src\"</span>],\n  <span class=\"hljs-string\">\"references\"</span>: [{ <span class=\"hljs-string\">\"path\"</span>: <span class=\"hljs-string\">\"./tsconfig.node.json\"</span> }]\n}\n</code></pre>\n<h2>7. Prettier 설정하기</h2>\n<p>코드를 깔끔하고 일관되게 유지하기 위해 Prettier를 설치하고 구성했어요. 지금은 우리의 요구에 충분한 기본 구성을 사용하고 있어요.</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-js\">pnpm add -D prettier\n</code></pre>\n<h2>프로젝트 실행하기</h2>\n<p>모든 것이 올바르게 설정되었는지 확인하기 위해 dev 스크립트를 사용하여 프로젝트를 실행했습니다. 이 스크립트는 웹 서버를 시작하고 데모 페이지를 로드하여 Button 구성 요소를 테스트했습니다.</p>\n<pre><code class=\"hljs language-js\">pnpm dev\n</code></pre>\n<div class=\"content-ad\"></div>\n<img src=\"/assets/img/2024-05-16-BuildinganOpenSourceReactUILibraryDay2_2.png\">\n<p>앞으로는 더 포괄적인 컴포넌트 설명과 테스트를 위해 Storybook을 사용할 계획입니다.</p>\n<h1>Package Configuration</h1>\n<p>여기에 필요한 모든 종속성과 스크립트가 포함된 package.json 파일을 살펴보겠습니다:</p>\n<div class=\"content-ad\"></div>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"name\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"etna-ui\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"author\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"Matteo Cavallo\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"description\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"EtnaUI는 이탈리아에서 사랑을 담아 만들어진 종합적인 디자인 시스템입니다.\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"type\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"module\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"files\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-string\">\"dist\"</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"scripts\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"dev\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"vite\"</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"peerDependencies\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"react\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"^18.3.0\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"react-dom\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"^18.3.0\"</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"devDependencies\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">\"@types/react\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"^18.3.2\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"@types/react-dom\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"^18.3.0\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"@vitejs/plugin-react\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"^4.2.1\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"prettier\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"^3.2.5\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"sass\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"^1.77.1\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"typescript\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"^5.4.5\"</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">\"vite\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"^5.2.11\"</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<h1>다음 단계</h1>\n<p>기초 세팅이 완료되었으므로 나머지 컴포넌트를 구축할 준비가 되었습니다. 아직 해야 할 몇 가지 항목들이 있습니다:</p>\n<ul>\n<li>적절한 폴더 구조 설정</li>\n<li>컴포넌트 문서화 및 테스트를 위해 Storybook 구현</li>\n<li>Jest를 이용한 단위 테스트 구성</li>\n<li>CI/CD 파이프라인 설정</li>\n<li>변형에 대해 CVA 사용 여부 고려</li>\n<li>스타일링을 위해 BEM 사용 여부 고려</li>\n<li>코드 품질을 위한 ESLint 추가</li>\n</ul>\n<div class=\"content-ad\"></div>\n<p>일상적인 진행 상황 업데이트를 계속해서 공유할 테니 기다려주세요. 지금 당장은 GitHub에서 프로젝트의 현재 상태를 확인할 수 있어요.</p>\n<p>이 여정을 따라와 주셔서 감사합니다. 아래 댓글에 궁금한 점이나 제안 사항을 자유롭게 남겨주세요. 함께 멋진 것을 만들어봐요!</p>\n<p>즐거운 코딩 되세요!</p>\n</body>\n</html>\n"},"__N_SSG":true}