{"pageProps":{"post":{"title":"오픈 소스 리액트 UI 라이브러리 구축하기 - 2일째","description":"","date":"2024-05-16 19:18","slug":"2024-05-16-BuildinganOpenSourceReactUILibraryDay2","content":"\n<img src=\"/assets/img/2024-05-16-BuildinganOpenSourceReactUILibraryDay2_0.png\" />\n\n두 번째 날 다시 방문해 주셔서 환영합니다. 오픈 소스 React UI 라이브러리를 만드는 시리즈의 두 번째 날입니다!\n\n오늘은 모든 것을 준비하는 과정이었습니다. 우리가 지금까지 얼마나 진전했는지 살펴봅시다.\n\n# 프로젝트 설정하기\n\n<div class=\"content-ad\"></div>\n\n## 1. Git 저장소 구성하기\n\n우선, GitHub의 EtnaUI라는 조직 아래 etna-ui라는 새로운 Git 저장소를 설정했습니다. 여기서 저장소를 확인할 수 있어요. 이 저장소는 앞으로 코드와 협업을 위한 중앙 허브 역할을 할 거에요.\n\n![GitHub 저장소](/assets/img/2024-05-16-BuildinganOpenSourceReactUILibraryDay2_1.png)\n\n## 2. React 프로젝트 부트스트래핑하기\n\n<div class=\"content-ad\"></div>\n\n다음은 React 프로젝트를 처음부터 시작하는 방법을 설명하겠습니다. Create React App을 사용하는 대신에 번들러로 Vite를 선택했습니다. Vite는 빠르고 간단하다는 것으로 알려져 있어서 개발 프로세스를 효과적으로 해결하는 데 도움이 될 것입니다. 아래는 설정하는 방법입니다:\n\n```js\npnpm add react react-dom\npnpm add -D vite @vitejs/plugin-react\n```\n\n또한, vite.config.ts 파일을 구성하여 React 플러그인을 포함하도록 설정했습니다:\n\n```js\n// vite.config.ts\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\n\nexport default defineConfig({\n  plugins: [react()],\n});\n```\n\n<div class=\"content-ad\"></div>\n\n## 3. 패키지 매니저 선택\n\n페키지 관리를 위해 pnpm@9를 사용하기로 결정했어요. PNPM은 다른 패키지 매니저에 비해 디스크 공간을 더 효율적으로 사용하며 빠릅니다. 게다가, 서로 다른 개발 환경에서도 일관성을 유지하기 위해 Node.js 버전을 관리하기 위해 Volta를 사용하고 있어요.\n\n## 4. 첫 번째 컴포넌트 생성\n\n기본 설정이 완료되었으니, 첫 번째 컴포넌트를 만들었어요: 간단한 `Button` 컴포넌트입니다. 이 초기 컴포넌트를 사용하여 모든 것이 정상적으로 작동하는지 테스트할 예정이에요.\n\n<div class=\"content-ad\"></div>\n\n아래는 Button 컴포넌트를 간단히 살펴볼 수 있어요:\n\n```js\nimport { ButtonHTMLAttributes } from \"react\";\n\nimport \"./Button.scss\";\n\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: \"primary\" | \"secondary\";\n  size?: \"small\" | \"medium\" | \"large\";\n}\n\nexport const Button = ({ className, size = \"medium\", variant = \"primary\", ...props }: ButtonProps) => (\n  <button className={`button button--${variant} button--${size}`} {...props} />\n);\n```\n\n그리고 함께 사용되는 SCSS 파일은 아래와 같아요:\n\n```js\n.button {\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  cursor: pointer;\n  display: inline-block;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 1.5;\n  padding: 8px 16px;\n  text-align: center;\n  text-decoration: none;\n  transition:\n    background-color 0.3s,\n    border-color 0.3s,\n    color 0.3s;\n\n  &--primary {\n    background-color: #8a4dff;\n    color: #ffffff;\n\n    &:hover {\n      background-color: #6f3aff;\n    }\n\n    &:active {\n      background-color: #4d1aff;\n    }\n  }\n\n  &--secondary {\n    background-color: #d6baff;\n    color: #000000;\n\n    &:hover {\n      background-color: #b38cff;\n    }\n\n    &:active {\n      background-color: #8a4dff;\n    }\n  }\n\n  &--small {\n    font-size: 12px;\n    padding: 6px 12px;\n  }\n\n  &--medium {\n    font-size: 16px;\n    padding: 10px 20px;\n  }\n\n  &--large {\n    font-size: 18px;\n    padding: 12px 24px;\n  }\n}\n```\n\n<div class=\"content-ad\"></div>\n\n## 5. Sass 지원 추가하기\n\n우리의 컴포넌트를 스타일링하기 위해, 종속성으로 Sass 지원을 추가했어요:\n\n```js\npnpm add sass\n```\n\n## 6. TypeScript 구성하기\n\n<div class=\"content-ad\"></div>\n\nTypeScript은 우리의 설정에서 중요한 부분으로, 타입 안전성과 개발자 경험을 향상시켜줍니다. tsconfig.json을 설정하는 데 시간을 소비해서, 프로젝트의 요구에 맞게 맞추었어요. TypeScript 구성에 대해 더 깊이 파고들고 싶다면, 이 가이드가 매우 유용했어요.\n\n```js\n{\n  \"compilerOptions\": {\n    /* 언어 및 환경 */\n    \"target\": \"ESNext\",                                  /* 생성된 JavaScript에 대한 JavaScript 언어 버전 및 호환 라이브러리 선언을 포함하도록 설정. */\n    \"jsx\": \"react-jsx\",                                /* 생성된 JSX 코드를 지정합니다. */\n\n    /* 모듈 */\n    \"module\": \"ESNext\",                                /* 생성된 모듈 코드를 지정합니다. */\n    \"moduleResolution\": \"Bundler\",                     /* TypeScript가 지정된 모듈 지정자에서 파일을 어떻게 찾는지를 지정합니다. */\n    \"noEmit\": true,                                   /* 컴파일 중에 파일을 생성하지 않도록 설정합니다. */\n\n    /* 타입 확인 */\n    \"strict\": true,                                      /* 모든 엄격한 타입 확인 옵션을 활성화합니다. */\n  },\n  \"include\": [\"src\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}\n```\n\n## 7. Prettier 설정하기\n\n코드를 깔끔하고 일관되게 유지하기 위해 Prettier를 설치하고 구성했어요. 지금은 우리의 요구에 충분한 기본 구성을 사용하고 있어요.\n\n<div class=\"content-ad\"></div>\n\n```js\npnpm add -D prettier\n```\n\n## 프로젝트 실행하기\n\n모든 것이 올바르게 설정되었는지 확인하기 위해 dev 스크립트를 사용하여 프로젝트를 실행했습니다. 이 스크립트는 웹 서버를 시작하고 데모 페이지를 로드하여 Button 구성 요소를 테스트했습니다.\n\n```js\npnpm dev\n```\n\n<div class=\"content-ad\"></div>\n\n<img src=\"/assets/img/2024-05-16-BuildinganOpenSourceReactUILibraryDay2_2.png\" />\n\n앞으로는 더 포괄적인 컴포넌트 설명과 테스트를 위해 Storybook을 사용할 계획입니다.\n\n# Package Configuration\n\n여기에 필요한 모든 종속성과 스크립트가 포함된 package.json 파일을 살펴보겠습니다:\n\n<div class=\"content-ad\"></div>\n\n```json\n{\n  \"name\": \"etna-ui\",\n  \"author\": \"Matteo Cavallo\",\n  \"description\": \"EtnaUI는 이탈리아에서 사랑을 담아 만들어진 종합적인 디자인 시스템입니다.\",\n  \"type\": \"module\",\n  \"files\": [\"dist\"],\n  \"scripts\": {\n    \"dev\": \"vite\"\n  },\n  \"peerDependencies\": {\n    \"react\": \"^18.3.0\",\n    \"react-dom\": \"^18.3.0\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.3.2\",\n    \"@types/react-dom\": \"^18.3.0\",\n    \"@vitejs/plugin-react\": \"^4.2.1\",\n    \"prettier\": \"^3.2.5\",\n    \"sass\": \"^1.77.1\",\n    \"typescript\": \"^5.4.5\",\n    \"vite\": \"^5.2.11\"\n  }\n}\n```\n\n# 다음 단계\n\n기초 세팅이 완료되었으므로 나머지 컴포넌트를 구축할 준비가 되었습니다. 아직 해야 할 몇 가지 항목들이 있습니다:\n\n- 적절한 폴더 구조 설정\n- 컴포넌트 문서화 및 테스트를 위해 Storybook 구현\n- Jest를 이용한 단위 테스트 구성\n- CI/CD 파이프라인 설정\n- 변형에 대해 CVA 사용 여부 고려\n- 스타일링을 위해 BEM 사용 여부 고려\n- 코드 품질을 위한 ESLint 추가\n\n<div class=\"content-ad\"></div>\n\n일상적인 진행 상황 업데이트를 계속해서 공유할 테니 기다려주세요. 지금 당장은 GitHub에서 프로젝트의 현재 상태를 확인할 수 있어요.\n\n이 여정을 따라와 주셔서 감사합니다. 아래 댓글에 궁금한 점이나 제안 사항을 자유롭게 남겨주세요. 함께 멋진 것을 만들어봐요!\n\n즐거운 코딩 되세요!\n","ogImage":{"url":"/assets/img/2024-05-16-BuildinganOpenSourceReactUILibraryDay2_0.png"},"coverImage":"/assets/img/2024-05-16-BuildinganOpenSourceReactUILibraryDay2_0.png","tag":["Tech"],"readingTime":6},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    h2: \"h2\",\n    img: \"img\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"img\", {\n      src: \"/assets/img/2024-05-16-BuildinganOpenSourceReactUILibraryDay2_0.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"두 번째 날 다시 방문해 주셔서 환영합니다. 오픈 소스 React UI 라이브러리를 만드는 시리즈의 두 번째 날입니다!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"오늘은 모든 것을 준비하는 과정이었습니다. 우리가 지금까지 얼마나 진전했는지 살펴봅시다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"프로젝트 설정하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"1. Git 저장소 구성하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우선, GitHub의 EtnaUI라는 조직 아래 etna-ui라는 새로운 Git 저장소를 설정했습니다. 여기서 저장소를 확인할 수 있어요. 이 저장소는 앞으로 코드와 협업을 위한 중앙 허브 역할을 할 거에요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-16-BuildinganOpenSourceReactUILibraryDay2_1.png\",\n        alt: \"GitHub 저장소\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"2. React 프로젝트 부트스트래핑하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"다음은 React 프로젝트를 처음부터 시작하는 방법을 설명하겠습니다. Create React App을 사용하는 대신에 번들러로 Vite를 선택했습니다. Vite는 빠르고 간단하다는 것으로 알려져 있어서 개발 프로세스를 효과적으로 해결하는 데 도움이 될 것입니다. 아래는 설정하는 방법입니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"pnpm add react react-dom\\npnpm add -D vite @vitejs/plugin-react\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"또한, vite.config.ts 파일을 구성하여 React 플러그인을 포함하도록 설정했습니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"// vite.config.ts\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { defineConfig } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"vite\\\"\"\n        }), \";\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" react \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"@vitejs/plugin-react\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"default\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"defineConfig\"\n        }), \"({\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"plugins\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"react\"\n        }), \"()],\\n});\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"3. 패키지 매니저 선택\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"페키지 관리를 위해 pnpm@9를 사용하기로 결정했어요. PNPM은 다른 패키지 매니저에 비해 디스크 공간을 더 효율적으로 사용하며 빠릅니다. 게다가, 서로 다른 개발 환경에서도 일관성을 유지하기 위해 Node.js 버전을 관리하기 위해 Volta를 사용하고 있어요.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"4. 첫 번째 컴포넌트 생성\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"기본 설정이 완료되었으니, 첫 번째 컴포넌트를 만들었어요: 간단한 \", _jsx(_components.code, {\n        children: \"Button\"\n      }), \" 컴포넌트입니다. 이 초기 컴포넌트를 사용하여 모든 것이 정상적으로 작동하는지 테스트할 예정이에요.\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아래는 Button 컴포넌트를 간단히 살펴볼 수 있어요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" { \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ButtonHTMLAttributes\"\n        }), \" } \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"from\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./Button.scss\\\"\"\n        }), \";\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" interface \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ButtonProps\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"extends\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"ButtonHTMLAttributes\"\n        }), \"<\", _jsx(_components.span, {\n          className: \"hljs-title class_\",\n          children: \"HTMLButtonElement\"\n        }), \"> {\\n  variant?: \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"primary\\\"\"\n        }), \" | \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"secondary\\\"\"\n        }), \";\\n  size?: \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"small\\\"\"\n        }), \" | \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"medium\\\"\"\n        }), \" | \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"large\\\"\"\n        }), \";\\n}\\n\\n\", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"export\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-title function_\",\n          children: \"Button\"\n        }), \" = (\", _jsxs(_components.span, {\n          className: \"hljs-params\",\n          children: [\"{ className, size = \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"medium\\\"\"\n          }), \", variant = \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"primary\\\"\"\n          }), \", ...props }: ButtonProps\"]\n        }), \") => (\\n  \", _jsx(_components.span, {\n          className: \"xml\",\n          children: _jsxs(_components.span, {\n            className: \"hljs-tag\",\n            children: [\"<\", _jsx(_components.span, {\n              className: \"hljs-name\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"className\"\n            }), \"=\", _jsx(_components.span, {\n              className: \"hljs-string\",\n              children: \"{\"\n            }), \"`\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"button\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"button--\"\n            }), \"${\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"variant\"\n            }), \"} \", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"button--\"\n            }), \"${\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"size\"\n            }), \"}`} {\", _jsx(_components.span, {\n              className: \"hljs-attr\",\n              children: \"...props\"\n            }), \"} />\"]\n          })\n        }), \"\\n);\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그리고 함께 사용되는 SCSS 파일은 아래와 같아요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\".\", _jsx(_components.span, {\n          className: \"hljs-property\",\n          children: \"button\"\n        }), \" {\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"border\"\n        }), \": 1px solid #ccc;\\n  border-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"radius\"\n        }), \": 4px;\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"cursor\"\n        }), \": pointer;\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"display\"\n        }), \": inline-block;\\n  font-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"size\"\n        }), \": 14px;\\n  font-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"weight\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"500\"\n        }), \";\\n  line-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"height\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"1.5\"\n        }), \";\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"padding\"\n        }), \": 8px 16px;\\n  text-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"align\"\n        }), \": center;\\n  text-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"decoration\"\n        }), \": none;\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"transition\"\n        }), \":\\n    background-color \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.\"\n        }), \"3s,\\n    border-color \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.\"\n        }), \"3s,\\n    color \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"0.\"\n        }), \"3s;\\n\\n  &--primary {\\n    background-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"color\"\n        }), \": #8a4dff;\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"color\"\n        }), \": #ffffff;\\n\\n    &:hover {\\n      background-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"color\"\n        }), \": #6f3aff;\\n    }\\n\\n    &:active {\\n      background-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"color\"\n        }), \": #4d1aff;\\n    }\\n  }\\n\\n  &--secondary {\\n    background-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"color\"\n        }), \": #d6baff;\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"color\"\n        }), \": #\", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"000000\"\n        }), \";\\n\\n    &:hover {\\n      background-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"color\"\n        }), \": #b38cff;\\n    }\\n\\n    &:active {\\n      background-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"color\"\n        }), \": #8a4dff;\\n    }\\n  }\\n\\n  &--small {\\n    font-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"size\"\n        }), \": 12px;\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"padding\"\n        }), \": 6px 12px;\\n  }\\n\\n  &--medium {\\n    font-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"size\"\n        }), \": 16px;\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"padding\"\n        }), \": 10px 20px;\\n  }\\n\\n  &--large {\\n    font-\", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"size\"\n        }), \": 18px;\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"padding\"\n        }), \": 12px 24px;\\n  }\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"5. Sass 지원 추가하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"우리의 컴포넌트를 스타일링하기 위해, 종속성으로 Sass 지원을 추가했어요:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"pnpm add sass\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"6. TypeScript 구성하기\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"TypeScript은 우리의 설정에서 중요한 부분으로, 타입 안전성과 개발자 경험을 향상시켜줍니다. tsconfig.json을 설정하는 데 시간을 소비해서, 프로젝트의 요구에 맞게 맞추었어요. TypeScript 구성에 대해 더 깊이 파고들고 싶다면, 이 가이드가 매우 유용했어요.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-js\",\n        children: [\"{\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"compilerOptions\\\"\"\n        }), \": {\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 언어 및 환경 */\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"target\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ESNext\\\"\"\n        }), \",                                  \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 생성된 JavaScript에 대한 JavaScript 언어 버전 및 호환 라이브러리 선언을 포함하도록 설정. */\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"jsx\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"react-jsx\\\"\"\n        }), \",                                \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 생성된 JSX 코드를 지정합니다. */\"\n        }), \"\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 모듈 */\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"module\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"ESNext\\\"\"\n        }), \",                                \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 생성된 모듈 코드를 지정합니다. */\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"moduleResolution\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Bundler\\\"\"\n        }), \",                     \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* TypeScript가 지정된 모듈 지정자에서 파일을 어떻게 찾는지를 지정합니다. */\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"noEmit\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",                                   \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 컴파일 중에 파일을 생성하지 않도록 설정합니다. */\"\n        }), \"\\n\\n    \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 타입 확인 */\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"strict\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-literal\",\n          children: \"true\"\n        }), \",                                      \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"/* 모든 엄격한 타입 확인 옵션을 활성화합니다. */\"\n        }), \"\\n  },\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"include\\\"\"\n        }), \": [\", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"src\\\"\"\n        }), \"],\\n  \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"references\\\"\"\n        }), \": [{ \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"path\\\"\"\n        }), \": \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"./tsconfig.node.json\\\"\"\n        }), \" }]\\n}\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"7. Prettier 설정하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"코드를 깔끔하고 일관되게 유지하기 위해 Prettier를 설치하고 구성했어요. 지금은 우리의 요구에 충분한 기본 구성을 사용하고 있어요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"pnpm add -D prettier\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"프로젝트 실행하기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"모든 것이 올바르게 설정되었는지 확인하기 위해 dev 스크립트를 사용하여 프로젝트를 실행했습니다. 이 스크립트는 웹 서버를 시작하고 데모 페이지를 로드하여 Button 구성 요소를 테스트했습니다.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"hljs language-js\",\n        children: \"pnpm dev\\n\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-16-BuildinganOpenSourceReactUILibraryDay2_2.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"앞으로는 더 포괄적인 컴포넌트 설명과 테스트를 위해 Storybook을 사용할 계획입니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"Package Configuration\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"여기에 필요한 모든 종속성과 스크립트가 포함된 package.json 파일을 살펴보겠습니다:\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"hljs language-json\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"name\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"etna-ui\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"author\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"Matteo Cavallo\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"description\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"EtnaUI는 이탈리아에서 사랑을 담아 만들어진 종합적인 디자인 시스템입니다.\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"type\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"module\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"files\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"[\"\n        }), _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"dist\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"]\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"scripts\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"dev\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"vite\\\"\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"peerDependencies\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"react\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"^18.3.0\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"react-dom\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"^18.3.0\\\"\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"devDependencies\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"@types/react\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"^18.3.2\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"@types/react-dom\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"^18.3.0\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"@vitejs/plugin-react\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"^4.2.1\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"prettier\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"^3.2.5\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"sass\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"^1.77.1\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"typescript\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"^5.4.5\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \",\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"hljs-attr\",\n          children: \"\\\"vite\\\"\"\n        }), _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \":\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-string\",\n          children: \"\\\"^5.2.11\\\"\"\n        }), \"\\n  \", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"hljs-punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"다음 단계\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"기초 세팅이 완료되었으므로 나머지 컴포넌트를 구축할 준비가 되었습니다. 아직 해야 할 몇 가지 항목들이 있습니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"적절한 폴더 구조 설정\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"컴포넌트 문서화 및 테스트를 위해 Storybook 구현\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Jest를 이용한 단위 테스트 구성\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"CI/CD 파이프라인 설정\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"변형에 대해 CVA 사용 여부 고려\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"스타일링을 위해 BEM 사용 여부 고려\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"코드 품질을 위한 ESLint 추가\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"일상적인 진행 상황 업데이트를 계속해서 공유할 테니 기다려주세요. 지금 당장은 GitHub에서 프로젝트의 현재 상태를 확인할 수 있어요.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 여정을 따라와 주셔서 감사합니다. 아래 댓글에 궁금한 점이나 제안 사항을 자유롭게 남겨주세요. 함께 멋진 것을 만들어봐요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"즐거운 코딩 되세요!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}