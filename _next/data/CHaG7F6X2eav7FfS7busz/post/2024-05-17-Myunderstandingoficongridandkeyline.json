{"pageProps":{"post":{"title":"아이콘 그리드와 키패드 라인에 대한 내 이해","description":"","date":"2024-05-17 22:08","slug":"2024-05-17-Myunderstandingoficongridandkeyline","content":"\n\n안녕하세요 여러분! 쉽게 아이콘을 만드는 데 도움이 될 수 있는 제 경험에서 가져온 다른 이야기로 돌아왔습니다. 아이콘을 만드는 것은 어렵게 보일 수 있지만, 적절한 도구가 있다면 여러분만의 라이브러리를 만들 수 있습니다. 이전 이야기에서는 Figma에서 아이콘을 만든 방법을 공유했습니다. 이 이야기는 아이콘 이야기의 전편입니다.\n\n# 시작해볼까요!\n\n![image](/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_0.png)\n\n위 이미지를 다섯 개의 섹션으로 나누는 것부터 시작해보죠.\n\n<div class=\"content-ad\"></div>\n\n- 그리드\n- 직교선 (Lines)\n- 활동 영역과 트림 영역\n- 키 형태\n- 마스크\n\n이러한 요소들을 하나의 프레임에 결합하면 아이콘을 만드는 데 사용되는 키프레임과 그리드를 얻게 됩니다.\n\n# 그리드\n\n![그리드](/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_1.png)\n\n<div class=\"content-ad\"></div>\n\n그리드는 구조물 전체에 걸쳐 교차하는 수직 및 수평선의 연속입니다. 그리드는 그래픽 요소를 조직하는 데 중요한 지원 구조로 작용합니다.\n\n나는 1.5px 두께의 스트로크를 이용해 아이콘을 만들 것이기 때문에 24x24px 캔버스에 1px 그리드를 사용했습니다. 따라서 2px 그리드보다 1px 그리드를 사용하는 것이 더 편리합니다.\n\n![Myunderstandingoficongridandkeyline_2.png](/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_2.png)\n\nFigma의 레이아웃 그리드 옵션을 활용하여 캔버스에 그리드를 추가해 보세요.\n\n<div class=\"content-ad\"></div>\n\n# 직교축\n\n![Image](/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_3.png)\n\n직교축은 캔버스의 중심점을 교차하고 추가적인 꼭짓점을 만드는 키프레임을 의미합니다. 이러한 선들은 보통 90°, 45°, 15° 및 5° 각도로 배치됩니다. 대개 90°와 45°가 사용되지만, 필요에 따라 15°와 5°를 추가할 수도 있습니다.\n\n직교축을 다양한 각도로 추가하려면 선 도구를 사용하면 됩니다.\n\n<div class=\"content-ad\"></div>\n\n# 라이브 영역 및 트림 영역\n\n![이미지](/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_4.png)\n\n라이브 영역은 아이콘의 주요 콘텐츠가 있는 공간입니다. 필요한 경우, 아이콘의 범위는 트림 영역까지 확장될 수 있지만 트림 영역 밖으로 확장되어서는 안 됩니다.\n\n# 주요 모양\n\n<div class=\"content-ad\"></div>\n\n![img](/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_5.png)\n\nKey Shapes은 원, 직사각형 및 정사각형과 같은 기본 도형을 만드는 데 도움이 되는 가이드입니다.\n\n저는 이러한 도형들을 자주 사용할 것이기 때문에 차원이 다른 다섯 개의 도형을 주요 도형으로 배치했습니다.\n\n- 10과 20의 차원을 가진 두 개의 원\n- 높이와 너비가 각각 18px인 한 개의 정사각형\n- 크기가 20px이고 너비가 16px인 수직 직사각형\n- 높이와 너비가 각각 16px와 20px인 수평 직사각형\n\n<div class=\"content-ad\"></div>\n\n각 모양마다 다른 색상이 있어서 사용하기 쉽습니다.\n\n# 마스크\n\n![이미지](/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_6.png)\n\n마스크는 아이콘의 컨테이너입니다. 로고 디자인에 주로 도움이 됩니다. 컨테이너에 내용을 클리핑하는 데 사용됩니다. 사용 사례에 따라 다른 테두리 반지름을 가질 수도 있습니다.\n\n<div class=\"content-ad\"></div>\n\n# 끝\n\n위 단계들을 결합하면 아이콘 그리드와 키라인을 얻게 됩니다. 이를 사용하여 많은 아이콘을 만들어보세요 :D\n\n저는 지출 관리 회사인 Fyle Technologies를 위해 이 그리드와 키라인을 사용하여 아이콘 라이브러리를 만들었습니다.\n\n<img src=\"/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_7.png\" />","ogImage":{"url":"/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_0.png"},"coverImage":"/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_0.png","tag":["Tech"],"readingTime":3},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\",\n    div: \"div\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"안녕하세요 여러분! 쉽게 아이콘을 만드는 데 도움이 될 수 있는 제 경험에서 가져온 다른 이야기로 돌아왔습니다. 아이콘을 만드는 것은 어렵게 보일 수 있지만, 적절한 도구가 있다면 여러분만의 라이브러리를 만들 수 있습니다. 이전 이야기에서는 Figma에서 아이콘을 만든 방법을 공유했습니다. 이 이야기는 아이콘 이야기의 전편입니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"시작해볼까요!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_0.png\",\n        alt: \"image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위 이미지를 다섯 개의 섹션으로 나누는 것부터 시작해보죠.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"그리드\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"직교선 (Lines)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"활동 영역과 트림 영역\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"키 형태\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"마스크\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이러한 요소들을 하나의 프레임에 결합하면 아이콘을 만드는 데 사용되는 키프레임과 그리드를 얻게 됩니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"그리드\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_1.png\",\n        alt: \"그리드\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그리드는 구조물 전체에 걸쳐 교차하는 수직 및 수평선의 연속입니다. 그리드는 그래픽 요소를 조직하는 데 중요한 지원 구조로 작용합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"나는 1.5px 두께의 스트로크를 이용해 아이콘을 만들 것이기 때문에 24x24px 캔버스에 1px 그리드를 사용했습니다. 따라서 2px 그리드보다 1px 그리드를 사용하는 것이 더 편리합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_2.png\",\n        alt: \"Myunderstandingoficongridandkeyline_2.png\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Figma의 레이아웃 그리드 옵션을 활용하여 캔버스에 그리드를 추가해 보세요.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"직교축\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_3.png\",\n        alt: \"Image\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"직교축은 캔버스의 중심점을 교차하고 추가적인 꼭짓점을 만드는 키프레임을 의미합니다. 이러한 선들은 보통 90°, 45°, 15° 및 5° 각도로 배치됩니다. 대개 90°와 45°가 사용되지만, 필요에 따라 15°와 5°를 추가할 수도 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"직교축을 다양한 각도로 추가하려면 선 도구를 사용하면 됩니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"라이브 영역 및 트림 영역\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_4.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"라이브 영역은 아이콘의 주요 콘텐츠가 있는 공간입니다. 필요한 경우, 아이콘의 범위는 트림 영역까지 확장될 수 있지만 트림 영역 밖으로 확장되어서는 안 됩니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"주요 모양\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_5.png\",\n        alt: \"img\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Key Shapes은 원, 직사각형 및 정사각형과 같은 기본 도형을 만드는 데 도움이 되는 가이드입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"저는 이러한 도형들을 자주 사용할 것이기 때문에 차원이 다른 다섯 개의 도형을 주요 도형으로 배치했습니다.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"10과 20의 차원을 가진 두 개의 원\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"높이와 너비가 각각 18px인 한 개의 정사각형\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"크기가 20px이고 너비가 16px인 수직 직사각형\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"높이와 너비가 각각 16px와 20px인 수평 직사각형\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"각 모양마다 다른 색상이 있어서 사용하기 쉽습니다.\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"마스크\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_6.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"마스크는 아이콘의 컨테이너입니다. 로고 디자인에 주로 도움이 됩니다. 컨테이너에 내용을 클리핑하는 데 사용됩니다. 사용 사례에 따라 다른 테두리 반지름을 가질 수도 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.h1, {\n      children: \"끝\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"위 단계들을 결합하면 아이콘 그리드와 키라인을 얻게 됩니다. 이를 사용하여 많은 아이콘을 만들어보세요 \", _jsx(_components.div, {})]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"저는 지출 관리 회사인 Fyle Technologies를 위해 이 그리드와 키라인을 사용하여 아이콘 라이브러리를 만들었습니다.\"\n    }), \"\\n\", _jsx(\"img\", {\n      src: \"/assets/img/2024-05-17-Myunderstandingoficongridandkeyline_7.png\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}