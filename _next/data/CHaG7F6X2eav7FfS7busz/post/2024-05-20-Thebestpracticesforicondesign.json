{"pageProps":{"post":{"title":"아이콘 디자인을 위한 최상의 방법","description":"","date":"2024-05-20 23:40","slug":"2024-05-20-Thebestpracticesforicondesign","content":"\n국내외 다양한 디자인 시스템의 디자이너들의 작업을 탐구하면서, 지식을 쌓고 지침을 받으며 여러 차례 실험하고 실패한 결과, 아이콘 제작에 대한 최고의 사례 연구를 마친 것으로 여겨집니다. 이것이 실시간으로 진행되는 최고의 사례 연구라고 자신합니다.\n\n아이콘의 주된 목적은 사용자들에게 문맥을 이해할 수 있는 간단한 방법을 제공하는 것입니다. 아이콘은 사용자들이 명확하게 이해하고 빠른 조치를 취할 수 있도록 도와줍니다.\n\n아이콘은 신속한 시각적 대화를 가능케 하므로 사용자들이 긴 텍스트를 읽을 필요가 없어요; 종종 보기만 해도 이해가 되기 때문입니다. 아이콘은 정보를 사용자에게 전달하고 사용자들이 읽는 것을 요구하지 않으면서도 명확하게 의도된 메시지를 전달할 수 있는 힘을 갖고 있습니다. 이에 아이콘이 사용자에게 의도된 메시지를 매우 명확하게 전달할 필요가 있습니다.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-20-Thebestpracticesforicondesign_1.png)\n\n그리드 시스템\n\n가이드라인을 설정하여 아이콘 디자인을 표준화하면 쉽게 인식 및 사용할 수 있습니다. 상세하고 명확한 가이드라인을 갖는 것은 디자이너가 아이콘을 조직화하고 표준화하는 데 도움이 됩니다. 제품의 일관된 시각적 언어를 유지하기 위해 현재와 미래를 위해 이러한 가이드라인을 최신 상태로 유지하는 것이 중요합니다.\n\n그리드 시스템에 관해서는 주로 16x16 및 20x20 그리드 시스템을 사용합니다. 16x16 또는 20x20 중에서 선택할 수 있으며, 이는 귀하나 귀하의 조직이 따르는 디자인 시스템(DSM)에 따라 다를 수 있습니다.\n\n<div class=\"content-ad\"></div>\n\n![Icon Design Best Practices 1](/assets/img/2024-05-20-Thebestpracticesforicondesign_2.png)\n\nCreating Icons: Key Points\nWhen designing icons, it's important to consider various factors. Elements like grid alignment, spacing, stroke size, padding, and object gaps are crucial for ensuring the icons look polished and refined.\n\n![Icon Design Best Practices 2](/assets/img/2024-05-20-Thebestpracticesforicondesign_3.png)\n\nComparison: 16X16 vs. 20X20\n\n<div class=\"content-ad\"></div>\n\n이전에 당신이 당신의 조직이 따르는 디자인 시스템(DSM)에 따라 16x16 또는 20x20 중 하나를 선택할 수 있다고 언급했습니다. 여기서 16x16과 20x20 사이의 차이를 더 명확하게 비교하고, 이러한 차이가 아이콘에 미치는 영향을 강조하고자 합니다.\n\n이러한 차이는 4픽셀을 추가하여 발생하며, 이러한 변화를 인식하는 데 도움을 드리겠습니다. 당신이나 당신의 조직이 16x16 그리드 시스템을 선택하는 경우, 아이콘은 20x20 그리드 시스템보다 약간 두꺼워 보일 것입니다. 또한 16x16 그리드에 비해 아이콘 구성 영역이 좀 더 넓어져서 작업을 만들기에 더 많은 공간을 확보할 수 있습니다.\n\n간격과 공백\n\n구성 영역 주변에 1픽셀의 공간을 할당하여 여유 공간을 확보합니다. 각각의 작은 박스가 하나의 픽셀을 차지하며, 이 작은 박스들을 관찰하여 아이콘을 구성하는 기초를 형성합니다.\n\n<div class=\"content-ad\"></div>\n\n테이블 태그를 Markdown 형식으로 변경하십시오.\n\nStroke: 또한, 1픽셀 폭의 스트로크를 준수하며, 정확히 하나의 픽셀 상자의 치수와 정렬됩니다.\n\nGap: 여기서 정의하는 갭은 두 개체가 만나거나 겹칠 때 최소 1픽셀 거리를 유지하는 것을 의미합니다.\n\n![이미지](/assets/img/2024-05-20-Thebestpracticesforicondesign_4.png)\n\n각도\n아이콘을 디자인할 때 각도 지향이 필요한 경우, 45도 각을 선호하는 것이 좋습니다. 그러나 이 각도가 잘 작동하지 않는 경우, 아이콘 요구에 가장 적합한 각도를 선택하는 것이 중요합니다.\n\n<div class=\"content-ad\"></div>\n\n![Icon](/assets/img/2024-05-20-Thebestpracticesforicondesign_5.png)\n\nScaling\n\n이 토론은 다양한 크기에 맞춰 아이콘의 크기를 효과적으로 확대하는 방법에 주로 초점을 맞춥니다. 예를 들어, 디자이너가 32x32 픽셀 아이콘을 만들라는 요청을 받았을 때, 따라야 하는 권장 접근 방식이 있습니다. 32x32 크기로 바로 시작하는 대신 시각 디자이너가 16x16 크기로 시작하는 것이 더 좋습니다.\n\n16x16 픽셀 그리드와 일치하여 아이콘을 작성하기 쉬워집니다. 디자인 프로세스를 간소화시키는 것뿐만 아니라 아이콘이 단위 간격 규칙 및 스트로크 크기 표준을 준수하는 것을 보장합니다.\n\n<div class=\"content-ad\"></div>\n\n![이미지](/assets/img/2024-05-20-Thebestpracticesforicondesign_6.png)\n\n둥근 모서리\n\n아이콘을 만들 때 고려해야 할 중요한 요소 중 하나는 모서리 반지름입니다. 모서리 반지름을 정확하게 유지하기 위한 원칙이 있습니다. 16x16 그리드를 기반으로 만든 아이콘이나 요소를 확대/축소하더라도 반지름은 비례해서 확대/축소됩니다.\n\n![이미지](/assets/img/2024-05-20-Thebestpracticesforicondesign_7.png)\n\n<div class=\"content-ad\"></div>\n\n**아이콘 라이브러리 관리**\n\nVD가 16X16 크기의 아이콘을 완료하면, 다양한 크기로 변환하거나 조절해야 합니다.\n\n선 굵기\n\n특정 크기로 아이콘을 확대/축소할 때, 해당 크기에 자동으로 조절되어야 합니다. 아이콘 크기를 늘릴 때 선의 굵기가 유지되도록 하는 것이 중요합니다. 요구된 크기의 선이 아닌 경우, 아이콘을 주의 깊게 검토하고 필요한 조정을 해야 합니다.\n\n<div class=\"content-ad\"></div>\n\n가장자리 사례\n\n위에서 강조한 지침과 규칙을 항상 따를 수 없는 예외 사례가 있습니다. 선이 항상 픽셀 상자에 완벽하게 들어 맞지 않을 수 있습니다. 여기서 이러한 상황에 대해 자세히 설명할 수 있는 몇 가지 참고 자료를 제공하겠습니다.\n\n첫 번째 경우, 저는 원의 가운데에 두 줄을 정렬하고 싶었습니다. 이 정렬은 그리드에 깔끔하게 맞추어 세밀한 픽셀 갭과 간격 관리를 보장하는 데 도움이 될 것입니다.\n\n두 번째 시나리오에서는 원을 둘러싼 세 개의 수직 선이 있습니다. 이전 경우와 비슷하게, 내 목표는 이 세 개의 선을 원의 가운데에 정렬하는 것이었습니다. 그러나 원과 중앙 정렬하면 그리드 안에 완벽하게 맞지 않을 것입니다. 각 선은 픽셀 상자의 왼쪽과 오른쪽 쪽 모두에서 0.5 픽셀을 차지할 것입니다.\n\n<div class=\"content-ad\"></div>\n\n엄격한 픽셀 그리드에 부합하지 않지만 아이콘 사이에 1픽셀 간격이 있습니다. 제가 설명해 드린 상황을 명확히 해 드리길 바랍니다.\n\n도구 설정 안내\n\n아이콘 크기를 다양한 크기로 확대하기 전에, Adobe 환경 설정에서 몇 가지 설정을 활성화해야 합니다. 이러한 설정을 활성화하면 아이콘들이 비례적이고 정밀하게 확대되도록 보장할 수 있습니다. 또한, 이러한 설정은 픽셀 완벽한 접근을 지원하여 픽셀 글리치의 가능성을 줄이며 유용한 실천 방법이 될 수 있습니다.\n","ogImage":{"url":"/assets/img/2024-05-20-Thebestpracticesforicondesign_0.png"},"coverImage":"/assets/img/2024-05-20-Thebestpracticesforicondesign_0.png","tag":["Tech"],"readingTime":4},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"국내외 다양한 디자인 시스템의 디자이너들의 작업을 탐구하면서, 지식을 쌓고 지침을 받으며 여러 차례 실험하고 실패한 결과, 아이콘 제작에 대한 최고의 사례 연구를 마친 것으로 여겨집니다. 이것이 실시간으로 진행되는 최고의 사례 연구라고 자신합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아이콘의 주된 목적은 사용자들에게 문맥을 이해할 수 있는 간단한 방법을 제공하는 것입니다. 아이콘은 사용자들이 명확하게 이해하고 빠른 조치를 취할 수 있도록 도와줍니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아이콘은 신속한 시각적 대화를 가능케 하므로 사용자들이 긴 텍스트를 읽을 필요가 없어요; 종종 보기만 해도 이해가 되기 때문입니다. 아이콘은 정보를 사용자에게 전달하고 사용자들이 읽는 것을 요구하지 않으면서도 명확하게 의도된 메시지를 전달할 수 있는 힘을 갖고 있습니다. 이에 아이콘이 사용자에게 의도된 메시지를 매우 명확하게 전달할 필요가 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-Thebestpracticesforicondesign_1.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그리드 시스템\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"가이드라인을 설정하여 아이콘 디자인을 표준화하면 쉽게 인식 및 사용할 수 있습니다. 상세하고 명확한 가이드라인을 갖는 것은 디자이너가 아이콘을 조직화하고 표준화하는 데 도움이 됩니다. 제품의 일관된 시각적 언어를 유지하기 위해 현재와 미래를 위해 이러한 가이드라인을 최신 상태로 유지하는 것이 중요합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"그리드 시스템에 관해서는 주로 16x16 및 20x20 그리드 시스템을 사용합니다. 16x16 또는 20x20 중에서 선택할 수 있으며, 이는 귀하나 귀하의 조직이 따르는 디자인 시스템(DSM)에 따라 다를 수 있습니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-Thebestpracticesforicondesign_2.png\",\n        alt: \"Icon Design Best Practices 1\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Creating Icons: Key Points\\nWhen designing icons, it's important to consider various factors. Elements like grid alignment, spacing, stroke size, padding, and object gaps are crucial for ensuring the icons look polished and refined.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-Thebestpracticesforicondesign_3.png\",\n        alt: \"Icon Design Best Practices 2\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Comparison: 16X16 vs. 20X20\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이전에 당신이 당신의 조직이 따르는 디자인 시스템(DSM)에 따라 16x16 또는 20x20 중 하나를 선택할 수 있다고 언급했습니다. 여기서 16x16과 20x20 사이의 차이를 더 명확하게 비교하고, 이러한 차이가 아이콘에 미치는 영향을 강조하고자 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이러한 차이는 4픽셀을 추가하여 발생하며, 이러한 변화를 인식하는 데 도움을 드리겠습니다. 당신이나 당신의 조직이 16x16 그리드 시스템을 선택하는 경우, 아이콘은 20x20 그리드 시스템보다 약간 두꺼워 보일 것입니다. 또한 16x16 그리드에 비해 아이콘 구성 영역이 좀 더 넓어져서 작업을 만들기에 더 많은 공간을 확보할 수 있습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"간격과 공백\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"구성 영역 주변에 1픽셀의 공간을 할당하여 여유 공간을 확보합니다. 각각의 작은 박스가 하나의 픽셀을 차지하며, 이 작은 박스들을 관찰하여 아이콘을 구성하는 기초를 형성합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"테이블 태그를 Markdown 형식으로 변경하십시오.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Stroke: 또한, 1픽셀 폭의 스트로크를 준수하며, 정확히 하나의 픽셀 상자의 치수와 정렬됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Gap: 여기서 정의하는 갭은 두 개체가 만나거나 겹칠 때 최소 1픽셀 거리를 유지하는 것을 의미합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-Thebestpracticesforicondesign_4.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"각도\\n아이콘을 디자인할 때 각도 지향이 필요한 경우, 45도 각을 선호하는 것이 좋습니다. 그러나 이 각도가 잘 작동하지 않는 경우, 아이콘 요구에 가장 적합한 각도를 선택하는 것이 중요합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-Thebestpracticesforicondesign_5.png\",\n        alt: \"Icon\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Scaling\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"이 토론은 다양한 크기에 맞춰 아이콘의 크기를 효과적으로 확대하는 방법에 주로 초점을 맞춥니다. 예를 들어, 디자이너가 32x32 픽셀 아이콘을 만들라는 요청을 받았을 때, 따라야 하는 권장 접근 방식이 있습니다. 32x32 크기로 바로 시작하는 대신 시각 디자이너가 16x16 크기로 시작하는 것이 더 좋습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"16x16 픽셀 그리드와 일치하여 아이콘을 작성하기 쉬워집니다. 디자인 프로세스를 간소화시키는 것뿐만 아니라 아이콘이 단위 간격 규칙 및 스트로크 크기 표준을 준수하는 것을 보장합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-Thebestpracticesforicondesign_6.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"둥근 모서리\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아이콘을 만들 때 고려해야 할 중요한 요소 중 하나는 모서리 반지름입니다. 모서리 반지름을 정확하게 유지하기 위한 원칙이 있습니다. 16x16 그리드를 기반으로 만든 아이콘이나 요소를 확대/축소하더라도 반지름은 비례해서 확대/축소됩니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/assets/img/2024-05-20-Thebestpracticesforicondesign_7.png\",\n        alt: \"이미지\"\n      })\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"아이콘 라이브러리 관리\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"VD가 16X16 크기의 아이콘을 완료하면, 다양한 크기로 변환하거나 조절해야 합니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"선 굵기\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"특정 크기로 아이콘을 확대/축소할 때, 해당 크기에 자동으로 조절되어야 합니다. 아이콘 크기를 늘릴 때 선의 굵기가 유지되도록 하는 것이 중요합니다. 요구된 크기의 선이 아닌 경우, 아이콘을 주의 깊게 검토하고 필요한 조정을 해야 합니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"가장자리 사례\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"위에서 강조한 지침과 규칙을 항상 따를 수 없는 예외 사례가 있습니다. 선이 항상 픽셀 상자에 완벽하게 들어 맞지 않을 수 있습니다. 여기서 이러한 상황에 대해 자세히 설명할 수 있는 몇 가지 참고 자료를 제공하겠습니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"첫 번째 경우, 저는 원의 가운데에 두 줄을 정렬하고 싶었습니다. 이 정렬은 그리드에 깔끔하게 맞추어 세밀한 픽셀 갭과 간격 관리를 보장하는 데 도움이 될 것입니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"두 번째 시나리오에서는 원을 둘러싼 세 개의 수직 선이 있습니다. 이전 경우와 비슷하게, 내 목표는 이 세 개의 선을 원의 가운데에 정렬하는 것이었습니다. 그러나 원과 중앙 정렬하면 그리드 안에 완벽하게 맞지 않을 것입니다. 각 선은 픽셀 상자의 왼쪽과 오른쪽 쪽 모두에서 0.5 픽셀을 차지할 것입니다.\"\n    }), \"\\n\", _jsx(\"div\", {\n      class: \"content-ad\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"엄격한 픽셀 그리드에 부합하지 않지만 아이콘 사이에 1픽셀 간격이 있습니다. 제가 설명해 드린 상황을 명확히 해 드리길 바랍니다.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"도구 설정 안내\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"아이콘 크기를 다양한 크기로 확대하기 전에, Adobe 환경 설정에서 몇 가지 설정을 활성화해야 합니다. 이러한 설정을 활성화하면 아이콘들이 비례적이고 정밀하게 확대되도록 보장할 수 있습니다. 또한, 이러한 설정은 픽셀 완벽한 접근을 지원하여 픽셀 글리치의 가능성을 줄이며 유용한 실천 방법이 될 수 있습니다.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}}},"__N_SSG":true}